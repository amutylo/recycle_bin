<?php
/**
 * @file
 * Contains recyclebin.module.
 */

define('RECYCLE_BIN_ACCESS_REALM', 'recycle_bin_access_item');
define('RECYCLE_BIN_PUBLIC', 0);
define('RECYCLE_BIN_PRIVATE', 1);

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 * @param string $route_name
 * @param RouteMatchInterface $route_match
 *
 * @return string
 */
function recycle_bin_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
  // Main module help for the recyclebin module.
    case 'help.page.recyclebin':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provide Recycle Bin functionality via state machine API.') . '</p>';
      return $output;
    default:
  }
}

/**
 * Implements hook_entity_insert().
 * Check if entity has field state, unset published
 * @param EntityInterface $entity
 */
function recycle_bin_entity_insert(EntityInterface $entity) {
  //TODO::if entity has field_state unpublish it;
  $hasStateField = $entity->get('field_state');
  if ($hasStateField) {
    $entity->setUnpublished();
  }
}

/**
 * Implements hook_entity_update().
 * @param EntityInterface $entity
 */
function recycle_bin_entity_presave(EntityInterface $entity) {
  $hasStateField = $entity->get('field_state');
  if ($hasStateField) {
    $state = $entity->get('field_state')->first()->value;
    switch($state) {
      case 'published':
        $entity->setPublished();
        break;
      case 'draft':
      case 'recycled':
        $entity->setUnpublished();
        break;
      default:
        break;
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * {@inheritdoc}
 */
function recycle_bin_entity_delete(EntityInterface $entity) {
  //TODO:: if entity as field_state prevent from delete it.
}


/**
 * Implements hook_entity_operation_alter().
 * @param array $operations
 * @param EntityInterface $entity
 */
  function recycle_bin_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // Check if entity has field_state, so such entity cannot be deleted, removing delete button from operations list.;
    $entityType = $entity->getEntityTypeId();
    if ($entityType === 'node') {
      $hasStateField = $entity->get('field_state');
      if ($hasStateField) {
        $state = $hasStateField->first()->value;
        if ($state !== 'recycled') {
          unset($operations["delete"]);
        }
      }
    }
}
